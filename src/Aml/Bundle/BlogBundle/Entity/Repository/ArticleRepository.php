<?php

namespace Aml\Bundle\BlogBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{

    /**
     * Function to build request in order to filter blog articles
     *
     * @param $query
     * @param array $params
     * @param array $filters
     * @return mixed
     */
    private function _buildRequestByFilters($query, $params = array(), $filters = array())
    {
        if (isset($filters['category']) && !empty($filters['category'])) {
            $query
                ->innerJoin('a.category', 'c')
                ->andWhere("c.system_name LIKE :category");
            $params['category'] = $filters['category'];
        }

        if (isset($filters['tag']) && !empty($filters['tag'])) {
            $query
                ->innerJoin('a.tags', 't')
                ->andWhere("t.system_name LIKE :tag");
            $params['tag'] = '%' . $filters['tag'] . '%';
        }

        $query->setParameters($params);

        return $query;
    }

    /**
     * Function to count public articles
     * @return mixed
     */
    public function countPublicArticles($filters = array())
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        $qb
            ->select('COUNT(a.id)')
            ->from('AmlBlogBundle:Article', 'a')
            ->where("a.public = 1");

        if (!empty($filters)) {
            $qb = $this->_buildRequestByFilters($qb, array(), $filters);
        }
        $query = $qb->getQuery();

        //echo $query->getSql(); var_dump($query->getParameters());exit;

        return $query->getSingleScalarResult();
    }

    /**
     * Function to load articles blog
     *
     * @param $limit
     * @param int $offset
     * @param array $filters
     * @return mixed
     */
    public function getPublicArticles($limit, $offset = 0, $filters = array())
    {

        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        $qb
            ->select('a')
            ->from('AmlBlogBundle:Article', 'a')
            ->leftJoin('a.logo', 'm')
            ->where("a.public = 1")
            ->orderBy('a.created', 'DESC')
            ->setMaxResults($limit)
            ->setFirstResult($offset);

        if (!empty($filters)) {
            $qb = $this->_buildRequestByFilters($qb, array(), $filters);
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Fonction qui permet de supprimer les mots clÃ©s libres d'une discussion pour les rajouter proprement
     * @param unknown_type $blog
     */
    public function cleanTags($blog)
    {
        $em = $this->getEntityManager();
        foreach ($blog->getTags() as $tag) {
            $blog->removeTag($tag);
        }
        $em->flush();
    }

    public function getArticleByUrlKey($urlKey){

        $q = $this->getEntityManager()->createQueryBuilder();
        $q
            ->select('e')
            ->from('AmlBlogBundle:Article', 'e')
            ->join('e.url', 'u')
            ->where('u.urlKey = :url_key')
            ->setMaxResults(1);

        $params = array(
            'url_key' => $urlKey
        );

        $q->setParameters($params);

        $query = $q->getQuery();

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

}