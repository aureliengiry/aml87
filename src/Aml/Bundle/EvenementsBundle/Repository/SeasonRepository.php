<?php

namespace Aml\Bundle\EvenementsBundle\Repository;

use Aml\Bundle\EvenementsBundle\Entity\Season;
use Doctrine\ORM\EntityRepository;

/**
 * Season
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SeasonRepository extends EntityRepository
{
    /**
     * Laod seasons by date start
     *
     * @param \DateTime $eventDateStart
     *
     * @return mixed|null
     */
    public function getSeasonByDateStart(\DateTime $eventDateStart)
    {
        $q = $this->getEntityManager()->createQueryBuilder();
        $q
            ->select('s')
            ->from(Season::class, 's')
            ->where('s.dateStart <= :eventDateStart')
            ->andWhere('s.dateEnd >= :eventDateStart')
            ->orderBy('s.dateStart', 'ASC')
            ->setMaxResults(1);

        $params = [
            'eventDateStart' => $eventDateStart,
        ];

        $q->setParameters($params);

        $query = $q->getQuery();

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    /**
     * Retrieve last past season
     *
     * @return mixed|null
     */
    public function getLastSeason()
    {
        $q = $this->getEntityManager()->createQueryBuilder();
        $q
            ->select('s')
            ->from(Season::class, 's')
            ->where('s.dateEnd < CURRENT_DATE()')
            ->orderBy('s.dateStart', 'DESC')
            ->setMaxResults(1);

        $query = $q->getQuery();

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    /**
     * Load past seasons
     *
     * @return array|null
     */
    public function getPastSeasons()
    {
        $q = $this->getEntityManager()->createQueryBuilder();
        $q
            ->select('s.id', 's.name', 'COUNT(e.id) as nb_events')
            ->from(Season::class, 's')
            ->where('s.dateEnd < CURRENT_DATE()')
            ->leftJoin('s.evenements', 'e', 'WITH', 'e.archive=:archive AND e.public=:public')
            ->groupBy('s.id')
            ->orderBy('s.dateStart', 'DESC');

        $params = [
            'archive' => 1,
            'public'  => 1,
        ];

        $q->setParameters($params);

        $query = $q->getQuery();

        return $query->getResult();
    }
}
