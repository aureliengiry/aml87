<?php

namespace Aml\Bundle\EvenementsBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * Evenement
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvenementRepository extends EntityRepository
{
	/**
     * Fonction pour avoir les prochains évènements
     * 
     * @param int $id_communaute
     * @param int $limit
     * @return ArrayCollection
     */
	public function getEvenementsCalendar( $dateStart, $dateEnd )
	{
		$dateTimeStart = new \DateTime();
		$dateTimeStart->setTimestamp($dateStart);
		
		$dateTimeEnd = new \DateTime();
		$dateTimeEnd->setTimestamp($dateEnd);
		
		$q = $this->getEntityManager()->createQueryBuilder();		
		$q
			 ->select('e')
			 ->from('AmlEvenementsBundle:Evenement', 'e')
			 ->where('e.dateStart > :dateStart')
			// ->andWhere('e.date_start < :date_end')
			 ->orderBy('e.dateStart', 'ASC')
			 ->setParameters(array
				 (
					'dateStart' => $dateTimeStart,
					//'date_end' => $dateTimeEnd,
				 ));

			
	    return $q->getQuery()->getResult();
	}

    /**
     * Function to build request in order to filter blog articles
     *
     * @param $query
     * @param array $params
     * @param array $filters
     * @return mixed
     */
    private function _buildRequestByFilters( $query, $params = array(), $filters = array() ){
        if( isset($filters['archive']) ){
            $query
                ->andWhere("e.archive = :archive")
            ;
            $params['archive'] = $filters['archive'];
        }

        if( isset($filters['public']) ){
            $query
                ->andWhere("e.public = :public")
            ;
            $params['public'] = $filters['public'];
        }
        if( isset($filters['type']) && !empty($filters['type']) ){
            $query
                ->andWhere("e.type = :type")
            ;
            $params['type'] = $filters['type'];
        }

        $query->setParameters( $params );

        return $query;
    }

	/**
     * Fonction pour avoir les prochains évènements
     * 
     * @param int $id_communaute
     * @param int $limit
     * @return ArrayCollection
     */
	public function getNextEvenements( $filters = array() )
	{
		$dateTimeStart = new \DateTime();
		$dateTimeStart->setTime(0,0);
		
		
		$q = $this->getEntityManager()->createQueryBuilder();		
		$q
			 ->select('e')
			 ->from('AmlEvenementsBundle:Evenement', 'e')
			 ->where('e.dateStart >= :dateStart')
			 ->orderBy('e.dateStart', 'ASC')
			/*               */
        ;

        if( !empty($filters) ){
            $params = array
            (
                'dateStart' => $dateTimeStart,
            );
            $q = $this->_buildRequestByFilters( $q,$params, $filters );
        }
        else{
            $q->setParameters(array
            (
                'dateStart' => $dateTimeStart,
            ));
        }

        $query =  $q->getQuery();
        //var_dump('<pre>', $query->getSQL(),$query->getParameters() );exit;
	    return $query->getResult();
	}
}