
WORKING_DIR=/var/www/html
DOCKER_COMPOSE=docker compose
EXEC_NODEJS=$(DOCKER_COMPOSE) exec encore
RUN_ENCORE=$(DOCKER_COMPOSE) run --rm encore yarn --cwd $(WORKING_DIR)
EXEC_MYSQL=$(DOCKER_COMPOSE) exec mysql
EXEC_PHP=$(DOCKER_COMPOSE) exec php-fpm

COMPOSER_BIN=$(EXEC_PHP) php -d memory_limit=-1 /usr/bin/composer
SYMFONY_CONSOLE=$(EXEC_PHP) php -d memory_limit=-1 $(WORKING_DIR)/bin/console

##
## ----------------------------------------------------------------------------
##   Project setup
## ----------------------------------------------------------------------------
##
git-hooks-install: ## Install/update hooks
	cp hooks/pre-commit.sh .git/hooks/pre-commit
	chmod 755 .git/hooks/pre-commit

project-update: ## Start all process to update project. Ex: make project-update
	make composer-install yarn-install assets-compile-dev git-hooks-install

project-upgrade: ## Start all process to update project. Ex: make project-upgrade
	make composer-update yarn-upgrade assets-compile-dev git-hooks-install

.PHONY: apache-restart git-hooks-install project-update project-upgrade

##
## ----------------------------------------------------------------------------
##   Docker
## ----------------------------------------------------------------------------
##

docker-init: docker-create-database-volume-if-not-exist ## Build and start docker of Relight
	$(DOCKER_COMPOSE) up -d --remove-orphans && $(DOCKER_COMPOSE) logs

docker-build: ## Build the project from latest images and without cache but don't start containers
	$(DOCKER_COMPOSE) build --no-cache --pull

docker-start: ## Start docker
	$(DOCKER_COMPOSE) start

docker-stop: ## Stop docker
	$(DOCKER_COMPOSE) stop

docker-restart: ## Restart project
	$(DOCKER_COMPOSE) restart

docker-ps: ## List all containers
	$(DOCKER_COMPOSE) ps

docker-stats: ## Print real-time statistics about containers ressources usage
	docker stats $(docker ps --format={{.Names}})

docker-logs: ## Follow logs generated by all containers
	$(DOCKER_COMPOSE) logs -f --tail=0

docker-logs-full: ## Follow logs generated by all containers from the containers creation
	$(DOCKER_COMPOSE) logs -f

docker-dev:
	$(DOCKER_COMPOSE) down && \
        $(DOCKER_COMPOSE) build --pull --no-cache && \
        $(DOCKER_COMPOSE) \
            -f $(DOCKER_COMPOSE).yml \
            -f $(DOCKER_COMPOSE).dev.yml \
        up -d --remove-orphans

docker-build-prod-image:
	docker build . --file ./docker/docker-full/phpfpm/Dockerfile \
        --build-arg BUILD_ARGUMENT_ENV=prod \
        -t aureliengiry/aml87-phpfpm:latest

docker-push-prod-image:
	docker push docker.io/aureliengiry/aml87-phpfpm

.PHONY: docker-init docker-build docker-start docker-stop docker-restart docker-ps docker-stats docker-logs docker-logs-full docker-build-prod-image docker-push-prod-image

##
## ----------------------------------------------------------------------------
##   Shell for each docker container
## ----------------------------------------------------------------------------
##

nodejs-shell: ## Shell of nodejs container
	$(EXEC_NODEJS) /bin/sh

mysql-shell: ## Shell of mysql container
	$(EXEC_MYSQL) /bin/bash

php-shell: ## Shell of mysql container
	$(EXEC_PHP) /bin/sh

.PHONY: nodejs-shell mysql-shell php-shell

##
## ----------------------------------------------------------------------------
##   Yarn
## ----------------------------------------------------------------------------
##

yarn-install: ## Install Javascript dependencies in node_modules directory.
	$(RUN_ENCORE) install

yarn-install-prod: ## Install Javascript dependencies for production in node_modules directory.
	$(RUN_ENCORE) install --prod

yarn-install-force: ## Install Javascript dependencies in node_modules directory with force mode.
	$(RUN_ENCORE) install --force

yarn-upgrade: ## Update Javascript dependencies in node_modules directory.
	$(RUN_ENCORE) upgrade

yarn-add: ## add Javascript dependencies. Ex: make yarn-add PACKAGE=react
	$(RUN_ENCORE) add $(PACKAGE)

yarn-remove: ## remove Javascript dependencies. Ex: make yarn-remove PACKAGE=react
	$(RUN_ENCORE) remove $(PACKAGE)

yarn-add-dev: ## add Javascript dependencies for dev. Ex: make yarn-add-dev PACKAGE=react
	$(RUN_ENCORE) add --dev $(PACKAGE)

yarn-test: ## start testing suite with jest. Ex: make yarn-test
	$(RUN_ENCORE) test $(PACKAGE)

.PHONY: yarn-install yarn-install-prod yarn-install-force yarn-upgrade yarn-add yarn-add-dev yarn-remove yarn-test

##
## ----------------------------------------------------------------------------
##   Assets
## ----------------------------------------------------------------------------
##

assets-compile-dev: yarn-install ## Compile assets for dev
	$(RUN_ENCORE) dev

assets-compile-dev-watch: ## Compile assets for dev with watch mode
	$(RUN_ENCORE) watch

assets-compile-prod: yarn-install-prod ## Compile assets for prod
	$(RUN_ENCORE) production

.PHONY: assets-compile-dev assets-compile-dev-watch assets-compile-prod

##
## ----------------------------------------------------------------------------
##   Symfony
## ----------------------------------------------------------------------------
##

sf-list: ## Get command list of project
	$(SYMFONY_CONSOLE)

sf-cc: ## Clear the cache in dev env
	$(SYMFONY_CONSOLE) cache:clear
	make sf-fix-rights

sf-fix-rights: ## Fix rights on var path
	chmod -R 777 var

sf-db-migrate: ## Migrate database schema to the latest available version. Ex: make sf-db-migrate
	$(SYMFONY_CONSOLE) doctrine:migrations:migrate -n

.PHONY: sf-list sf-cc sf-fix-rights sf-db-migrate

##
## ----------------------------------------------------------------------------
##   Composer
## ----------------------------------------------------------------------------
##

composer-install: ## Install PHP dependencies in vendor directory.
	$(COMPOSER_BIN) install

composer-remove: ## Update PHP dependencies in vendor directory. Ex: make composer-require PACKAGE=symfony/serializer
	$(COMPOSER_BIN) remove $(PACKAGE)

composer-require: ## Update PHP dependencies in vendor directory. Ex: make composer-require PACKAGE=symfony/serializer
	$(COMPOSER_BIN) require $(PACKAGE)

composer-require-dev: ## Update PHP dependencies for dev in vendor directory. Ex: make composer-require-dev PACKAGE=symfony/serializer
	$(COMPOSER_BIN) require --dev $(PACKAGE)

composer-update:    ## Update PHP dependencies in vendor directory.
	$(COMPOSER_BIN) update
	make yarn-install-force

.PHONY: composer-install composer-remove composer-require composer-require-dev composer-update

##
## ----------------------------------------------------------------------------
##   Database
## ----------------------------------------------------------------------------
##

db-init-dev:        ## Init Database, fixtures for dev
	-$(SYMFONY_CONSOLE) doctrine:database:drop --force --env=dev
	-$(SYMFONY_CONSOLE) doctrine:database:create --env=dev
	-$(SYMFONY_CONSOLE) doctrine:schema:update --force --env=dev
	-$(SYMFONY_CONSOLE) doctrine:fixtures:load --env=dev -n

.PHONY: db-init-dev

##
## ----------------------------------------------------------------------------
##   Tests
## ----------------------------------------------------------------------------
##

tests-init: vendor ## Init Database, fixtures for the PHP unit tests on docker
	-$(SYMFONY_CONSOLE) doctrine:database:drop --force --env=test
	-$(SYMFONY_CONSOLE) doctrine:database:create --env=test
	-$(SYMFONY_CONSOLE) doctrine:schema:update --complete --force --env=test
	-$(SYMFONY_CONSOLE) doctrine:fixtures:load --env=test -n


tests-ut:  ## Run the phpunit on unit tests and exclude functional tests
	php -d memory_limit=-1 vendor/bin/phpunit --exclude-group functional --testdox

tests-functional:  ## Run the phpunit on functionnal tests
	php -d memory_limit=-1 vendor/bin/phpunit --group functional --testdox

tests-watch: ## Run the phpunit on watch mode. Ex: make tests-watch
	php -d memory_limit=-1 vendor/bin/phpunit-watcher watch

tests-watch-filter: ## Run the phpunit on watch mode with filter. Ex: make tests-watch FILTER=testname
	php -d memory_limit=-1 vendor/bin/phpunit-watcher watch --filter=$(FILTER)

.PHONY: tests-init tests-ut tests-functional tests-watch tests-watch-filter

##
## ----------------------------------------------------------------------------
##   Tools
## ----------------------------------------------------------------------------
##
phpstan-complete: ## PHPStan - PHP Static Analysis Tool (Analyse all files in src/*)
	$(COMPOSER_BIN) phpstan

phpstan-general: ## PHPStan - PHP Static Analysis Tool (Analyse all files in src/*)
	php -d memory_limit=-1 vendor/bin/phpstan analyse -c phpstan.neon src --level max

phpstan-tests: ## PHPStan - PHP Static Analysis Tool (Analyse all files in tests/*)
	php -d memory_limit=-1 vendor/bin/phpstan analyse -c phpstan-tests.neon tests --level max

phpstan-diff: ## PHPStan analyse diff files with master (Analyse all updated php files)
	php -d memory_limit=-1 vendor/bin/phpstan analyse --level 7 \`git diff --name-only master... '*.php' \`

php-cs-fixer-dry-run:   ## PHP Code Style Fixer in dry-run mode
	vendor/bin/php-cs-fixer fix --config=.php-cs-fixer.dist.php -v --dry-run --allow-risky=yes

php-cs-fixer:           ## PHP Code Style Fixer
	vendor/bin/php-cs-fixer fix --config=.php-cs-fixer.dist.php -v --allow-risky=yes

rector-init: ## Init settings for Rector
	php vendor/bin/rector init

rector-process-diff-dry-run: ## Run rector on selected directory with dry-run mode. Ex: make rector-process-diff-dry-run
	php -d memory_limit=-1 vendor/bin/rector process \`git diff --name-only master... '*.php' \` --dry-run

rector-process-dry-run: ## Run rector on selected directory with dry-run mode. Ex: make rector-process-dry-run FILTER=src
	php -d memory_limit=-1 vendor/bin/rector process ${FILTER} --dry-run

rector-process: ## Run rector on selected directory. Ex: make rector-process FILTER=src
	 php -d memory_limit=-1 vendor/bin/rector process ${FILTER}

eslint: yarn-install  ## Lint Javascript files
	$(EXEC_NODEJS) /bin/sh -c "./node_modules/.bin/eslint assets/js webpack.config.js"

eslint-fix: yarn-install ## Lint Javascript files and fix them
	$(EXEC_NODEJS) /bin/sh -c "./node_modules/.bin/eslint --fix assets/js webpack.config.js"

# Rules from files
vendor: composer.lock
	@composer install

composer.lock: composer.json
	@echo compose.lock is not up to date.

yarn.lock: package.json
	@echo yarn.lock is not up to date.

.DEFAULT_GOAL := help
.PHONY: help
help: ## Show this help
	@egrep -h '(^[a-zA-Z0-9_-]+:.*?##.*$$)|(^##)' $(MAKEFILE_LIST) \
		| awk 'BEGIN {FS = ":.*?## "}; {printf "\033[32m%-30s\033[0m %s\n", $$1, $$2}' \
		| sed -e 's/\[32m##/[33m/'

docker-create-database-volume-if-not-exist:
	bash ./docker/docker-full/docker_create_database_volume.sh

generate-ssl-certificate: ## Generate self-signed certificate for dev
	openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./docker/docker-full/nginx/ssl/key/aml87_dev.key -out ./docker/docker-full/nginx/ssl/crt/aml87_dev.crt
